❝
🎯  TASK: Stop duplicate-key errors when inserting into chatbots.public_token
────────────────────────────────────────────────────────────────────────────
0.  Preconditions
    • We’re using the built-in Replit PostgreSQL (env var REPLIT_DB_URL or POSTGRES_URL).
    • The chatbots table currently has a UNIQUE index on public_token.
    • We have permission to run migrations (psql works in the shell).

1.  Enable UUID generator in Replit Postgres
    psql "$POSTGRES_URL" <<'SQL'
    create extension if not exists "uuid-ossp";
    SQL

2.  Migration: make public_token a UUID with a default
    -- migrations/20240502_chatbots_uuid_token.sql
    alter table chatbots
      alter column public_token drop default,
      alter column public_token type uuid using public_token::uuid,
      alter column public_token set default uuid_generate_v4();

3.  Remove the old token generator from the codebase
    • Delete / comment-out any helper like generateRandomToken() that returns 6-8 chars.
    • Delete the import wherever it is used.

4.  Update createChatbot (server/storage.ts or routes.ts)
    // BEFORE: const token = generateRandomToken(); INSERT (..., public_token)
    // AFTER :
    const { rows } = await sql`
      insert into chatbots
        (name, slack_channel_id, asana_project_id,
         created_by_id, require_auth)
      values
        (${name}, ${slackId ?? null}, ${asanaId ?? null},
         ${userId}, ${requireAuth ?? false})
      returning id, public_token;
    `;
    return rows[0];

    (The DB now fills public_token automatically.)

5.  Delete any try/catch that looks for err.code === "23505" on that column.

6.  Run the migration locally, then in Deploy
    # shell in Replit
    psql "$POSTGRES_URL" -f migrations/20240502_chatbots_uuid_token.sql

7.  Commit, push, and click **Deploy**.

8.  Smoke test (agent script)
    • POST /api/chatbots three times in Preview → 201, different uuid’s.
    • Same in https://<your-domain> → 201, no 500 error.
    • SQL sanity:
        select public_token, count(*) c
        from chatbots
        group by 1 having c > 1;   -- should return zero rows

Deliverable
✔ public_token column is uuid v4, generated by DB  
✔ 500 “duplicate key” error gone in production  
✔ No app-side random-string generator remains
────────────────────────────────────────────────────────────────────────────
❞
